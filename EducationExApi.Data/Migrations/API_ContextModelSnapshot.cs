// <auto-generated />
using System;
using EducationExApi.Data.Model.API_Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EducationExApi.Data.Migrations
{
    [DbContext(typeof(API_Context))]
    partial class API_ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EducationExApi.Data.Model.CodecoolDataModel.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            Description = "Master of quantum physics",
                            Name = "Albert Einstein"
                        },
                        new
                        {
                            AuthorId = 2,
                            Description = "Master of Chemistry",
                            Name = "Maria Skłodowska-Curie"
                        },
                        new
                        {
                            AuthorId = 3,
                            Description = "Actor, pirate",
                            Name = "Johny Deep"
                        },
                        new
                        {
                            AuthorId = 4,
                            Description = "Galactic rider of yellow magnetic star",
                            Name = "Szafarz"
                        });
                });

            modelBuilder.Entity("EducationExApi.Data.Model.CodecoolDataModel.Material", b =>
                {
                    b.Property<int>("MaterialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaterialId"), 1L, 1);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaterialTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaterialId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("MaterialTypeId");

                    b.ToTable("Materials");

                    b.HasData(
                        new
                        {
                            MaterialId = 1,
                            AuthorId = 1,
                            Description = "Structure of atom",
                            Location = "codecoolʼs library at Ślusarska 9",
                            MaterialTypeId = 1,
                            PublicationDate = new DateTime(1991, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Structur of atom"
                        },
                        new
                        {
                            MaterialId = 2,
                            AuthorId = 1,
                            Description = "Listen exploding atom sounds",
                            Location = "codecoolʼs library at Ślusarska 9",
                            MaterialTypeId = 2,
                            PublicationDate = new DateTime(1992, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Atom sounds"
                        },
                        new
                        {
                            MaterialId = 3,
                            AuthorId = 2,
                            Description = "Video-tutorial how to make taste drink",
                            Location = "codecoolʼs library at Ślusarska 9",
                            MaterialTypeId = 3,
                            PublicationDate = new DateTime(1993, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Taste drink"
                        },
                        new
                        {
                            MaterialId = 4,
                            AuthorId = 2,
                            Description = "Excersice how to check skin structure",
                            Location = "codecoolʼs library at Ślusarska 9",
                            MaterialTypeId = 4,
                            PublicationDate = new DateTime(1994, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Skin structure"
                        },
                        new
                        {
                            MaterialId = 5,
                            AuthorId = 2,
                            Description = "Radiate presentation",
                            Location = "codecoolʼs library at Ślusarska 9",
                            MaterialTypeId = 5,
                            PublicationDate = new DateTime(1995, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Radiate"
                        },
                        new
                        {
                            MaterialId = 6,
                            AuthorId = 3,
                            Description = "Database of hollywood actors created by Johny Deep Entertaitnment",
                            Location = "codecoolʼs library at Ślusarska 9",
                            MaterialTypeId = 6,
                            PublicationDate = new DateTime(1996, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Hollywood"
                        },
                        new
                        {
                            MaterialId = 7,
                            AuthorId = 3,
                            Description = "Lecture outline, subcject: what can we do to be a good pirate",
                            Location = "codecoolʼs library at Ślusarska 9",
                            MaterialTypeId = 7,
                            PublicationDate = new DateTime(1997, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Good pirate"
                        },
                        new
                        {
                            MaterialId = 8,
                            AuthorId = 3,
                            Description = "Lecture in pdf how to be a good pirate",
                            Location = "codecoolʼs library at Ślusarska 9",
                            MaterialTypeId = 1,
                            PublicationDate = new DateTime(1998, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Good pirate pdf"
                        },
                        new
                        {
                            MaterialId = 9,
                            AuthorId = 3,
                            Description = "Ebook with sounds of Johny Deep as a pirate",
                            Location = "codecoolʼs library at Ślusarska 9",
                            MaterialTypeId = 2,
                            PublicationDate = new DateTime(1999, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Pirate sounds"
                        },
                        new
                        {
                            MaterialId = 10,
                            AuthorId = 4,
                            Description = "Space tour video",
                            Location = "codecoolʼs library at Ślusarska 9",
                            MaterialTypeId = 3,
                            PublicationDate = new DateTime(1900, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Space tour"
                        },
                        new
                        {
                            MaterialId = 11,
                            AuthorId = 4,
                            Description = "Create with me small satelite",
                            Location = "codecoolʼs library at Ślusarska 9",
                            MaterialTypeId = 4,
                            PublicationDate = new DateTime(1909, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Satelite"
                        },
                        new
                        {
                            MaterialId = 12,
                            AuthorId = 4,
                            Description = "Power Point Presentation about Sun",
                            Location = "codecoolʼs library at Ślusarska 9",
                            MaterialTypeId = 5,
                            PublicationDate = new DateTime(1987, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Sun"
                        },
                        new
                        {
                            MaterialId = 13,
                            AuthorId = 4,
                            Description = "Database with hole galactic",
                            Location = "codecoolʼs library at Ślusarska 9",
                            MaterialTypeId = 6,
                            PublicationDate = new DateTime(1955, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Galactic"
                        },
                        new
                        {
                            MaterialId = 14,
                            AuthorId = 4,
                            Description = "Lecture about galactic structure",
                            Location = "codecoolʼs library at Ślusarska 9",
                            MaterialTypeId = 7,
                            PublicationDate = new DateTime(1944, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Galactic structure"
                        },
                        new
                        {
                            MaterialId = 15,
                            AuthorId = 4,
                            Description = "Definitions of cosmos",
                            Location = "codecoolʼs library at Ślusarska 9",
                            MaterialTypeId = 1,
                            PublicationDate = new DateTime(1966, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Cosmos"
                        },
                        new
                        {
                            MaterialId = 16,
                            AuthorId = 3,
                            Description = "Johny Deep is reading pirates book",
                            Location = "codecoolʼs library at Ślusarska 9",
                            MaterialTypeId = 2,
                            PublicationDate = new DateTime(1972, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Ebook pirate"
                        },
                        new
                        {
                            MaterialId = 17,
                            AuthorId = 1,
                            Description = "Video how to create own tesla generator",
                            Location = "codecoolʼs library at Ślusarska 9",
                            MaterialTypeId = 3,
                            PublicationDate = new DateTime(1911, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Tesla generator"
                        },
                        new
                        {
                            MaterialId = 18,
                            AuthorId = 2,
                            Description = "Exercices with radiation",
                            Location = "codecoolʼs library at Ślusarska 9",
                            MaterialTypeId = 4,
                            PublicationDate = new DateTime(1915, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Radiation"
                        });
                });

            modelBuilder.Entity("EducationExApi.Data.Model.CodecoolDataModel.MaterialType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MaterialTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Outline of definition in .pdf type file",
                            Type = "Pdf file"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Ebook-materil with lectures read by the author",
                            Type = "Ebook"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Video-tutorial with developed step-by-step examples",
                            Type = "Video"
                        },
                        new
                        {
                            Id = 4,
                            Description = "WorkBook with definitions, samples, excersices, answers",
                            Type = "WorkBook"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Power Point presentation material",
                            Type = "Presentation"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Database file with seeder",
                            Type = "Database file script"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Lecture outline with materials from lecture",
                            Type = "Lecture outline"
                        });
                });

            modelBuilder.Entity("EducationExApi.Data.Model.CodecoolDataModel.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"), 1L, 1);

                    b.Property<int?>("BaseUseruserId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReviewId");

                    b.HasIndex("BaseUseruserId");

                    b.HasIndex("MaterialId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("EducationExApi.Data.Model.UsersModel.BaseUser", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("userId"), 1L, 1);

                    b.Property<Guid?>("CredentialsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nickname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userId");

                    b.HasIndex("CredentialsId");

                    b.ToTable("BaseUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseUser");
                });

            modelBuilder.Entity("EducationExApi.Data.Model.UsersModel.CredentialsContainer", b =>
                {
                    b.Property<Guid>("CredentialsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("CredentialsId");

                    b.ToTable("CredentialsContainers");

                    b.HasData(
                        new
                        {
                            CredentialsId = new Guid("ac0b5af3-7368-414a-b40c-ccb9c97adeae"),
                            Login = "admin",
                            Password = "admin",
                            PasswordHash = new byte[] { 233, 99, 4, 85, 217, 129, 48, 179, 169, 253, 34, 195, 73, 92, 164, 91, 177, 222, 45, 232, 195, 61, 18, 39, 117, 0, 89, 238, 164, 88, 210, 228, 54, 130, 11, 131, 229, 11, 189, 231, 32, 106, 160, 149, 184, 56, 76, 111, 177, 87, 226, 226, 224, 135, 105, 171, 219, 48, 44, 195, 244, 89, 61, 210 },
                            PasswordSalt = new byte[] { 155, 98, 207, 78, 105, 140, 243, 229, 95, 56, 39, 98, 203, 249, 177, 128, 180, 243, 232, 111, 49, 213, 145, 207, 61, 112, 105, 132, 88, 235, 139, 52, 164, 4, 174, 115, 0, 27, 140, 36, 164, 202, 76, 184, 3, 146, 155, 205, 234, 65, 78, 189, 170, 175, 45, 37, 145, 252, 130, 136, 164, 253, 162, 67, 130, 64, 170, 191, 145, 79, 13, 52, 241, 9, 215, 96, 51, 115, 162, 111, 156, 47, 165, 102, 112, 21, 32, 152, 138, 32, 139, 80, 34, 115, 51, 139, 165, 201, 39, 240, 22, 137, 220, 62, 50, 137, 217, 171, 95, 160, 33, 148, 86, 187, 71, 247, 131, 84, 34, 228, 215, 135, 116, 100, 152, 213, 139, 233 }
                        });
                });

            modelBuilder.Entity("EducationExApi.Data.Model.UsersModel.AdminReadDTO", b =>
                {
                    b.HasBaseType("EducationExApi.Data.Model.UsersModel.BaseUser");

                    b.HasDiscriminator().HasValue("AdminReadDTO");
                });

            modelBuilder.Entity("EducationExApi.Data.Model.UsersModel.User", b =>
                {
                    b.HasBaseType("EducationExApi.Data.Model.UsersModel.BaseUser");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("EducationExApi.Data.Model.CodecoolDataModel.Material", b =>
                {
                    b.HasOne("EducationExApi.Data.Model.CodecoolDataModel.Author", "Author")
                        .WithMany("Materials")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationExApi.Data.Model.CodecoolDataModel.MaterialType", "MaterialType")
                        .WithMany("Materials")
                        .HasForeignKey("MaterialTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("MaterialType");
                });

            modelBuilder.Entity("EducationExApi.Data.Model.CodecoolDataModel.Review", b =>
                {
                    b.HasOne("EducationExApi.Data.Model.UsersModel.BaseUser", null)
                        .WithMany("Reviews")
                        .HasForeignKey("BaseUseruserId");

                    b.HasOne("EducationExApi.Data.Model.CodecoolDataModel.Material", "Material")
                        .WithMany("Reviews")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");
                });

            modelBuilder.Entity("EducationExApi.Data.Model.UsersModel.BaseUser", b =>
                {
                    b.HasOne("EducationExApi.Data.Model.UsersModel.CredentialsContainer", "Credentials")
                        .WithMany()
                        .HasForeignKey("CredentialsId");

                    b.Navigation("Credentials");
                });

            modelBuilder.Entity("EducationExApi.Data.Model.CodecoolDataModel.Author", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("EducationExApi.Data.Model.CodecoolDataModel.Material", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("EducationExApi.Data.Model.CodecoolDataModel.MaterialType", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("EducationExApi.Data.Model.UsersModel.BaseUser", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
